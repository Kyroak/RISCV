--
-- VHDL Architecture RISCV_lib.riscv.struct
--
-- Created:
--          by - flxpuchr.meyer (pc032)
--          at - 11:13:29 07/04/23
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY RISCV_lib;
USE RISCV_lib.opcode_word.ALL;


ARCHITECTURE struct OF riscv IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alu_mode_dc         : alu_mode_type;
   SIGNAL alu_mode_ex         : alu_mode_type;
   SIGNAL alu_out_ex          : word;
   SIGNAL alu_out_me          : word;
   SIGNAL alu_out_me_b        : word;
   SIGNAL bpu_mode_ex         : reg_addr;
   SIGNAL dec_add2mux         : word;
   SIGNAL fwd_sela_dc         : std_logic_vector(1 DOWNTO 0);
   SIGNAL fwd_sela_ex         : std_logic_vector(1 DOWNTO 0);
   SIGNAL fwd_selb_dc         : std_logic_vector(1 DOWNTO 0);
   SIGNAL fwd_selb_ex         : std_logic_vector(1 DOWNTO 0);
   SIGNAL fwd_selsd_dc        : std_logic;
   SIGNAL fwd_selsd_ex        : std_logic;
   SIGNAL fwd_selsd_me        : std_logic;
   SIGNAL if_u_instr          : word;
   SIGNAL if_u_next_pc        : word;
   SIGNAL imm_bta_dc          : word;
   SIGNAL imm_dc              : word;
   SIGNAL imm_dec_control_mux : std_logic;
   SIGNAL imm_ex              : word;
   SIGNAL imm_to_alu_dc       : std_logic;
   SIGNAL imm_to_alu_ex       : std_logic;
   SIGNAL instr_dc            : word;
   SIGNAL me_out_me           : word;
   SIGNAL mem_mode_dc         : mem_mode_type;
   SIGNAL mem_mode_ex         : mem_mode_type;
   SIGNAL mem_mode_me         : mem_mode_type;
   SIGNAL pc_dec              : word;
   SIGNAL pc_if               : word;
   SIGNAL reg_A_dc            : word;
   SIGNAL reg_B_dc            : word;
   SIGNAL reg_B_ex            : word;
   SIGNAL reg_B_ex_1          : word;
   SIGNAL reg_addr_wb         : reg_addr;
   SIGNAL reg_value_wb        : word;
   SIGNAL sela_dec            : reg_addr;
   SIGNAL selb_dec            : reg_addr;
   SIGNAL store_data_2_dm     : word;
   SIGNAL store_data_dm       : word;
   SIGNAL target_reg_dc       : REG_ADDR;
   SIGNAL target_reg_ex       : REG_ADDR;
   SIGNAL target_reg_me       : reg_addr;
   SIGNAL value_a             : word;
   SIGNAL value_a_1           : word;
   SIGNAL value_b             : word;
   SIGNAL value_dm            : word;


   -- Component Declarations
   COMPONENT add4
   PORT (
      pc_if        : IN     word ;
      if_u_next_pc : OUT    word 
   );
   END COMPONENT;
   COMPONENT alu
   PORT (
      alu_mode_ex : IN     alu_mode_type ;
      value_a     : IN     word ;
      value_b     : IN     word ;
      alu_out_ex  : OUT    word 
   );
   END COMPONENT;
   COMPONENT bpu
   PORT (
      bpu_mode_ex : IN     reg_addr
   );
   END COMPONENT;
   COMPONENT dc_reg
   PORT (
      alu_mode_dc   : IN     alu_mode_type ;
      clk           : IN     std_logic ;
      fwd_sela_dc   : IN     std_logic_vector (1 DOWNTO 0);
      fwd_selb_dc   : IN     std_logic_vector (1 DOWNTO 0);
      fwd_selsd_dc  : IN     std_logic ;
      imm_bta_dc    : IN     word ;
      imm_to_alu_dc : IN     std_logic ;
      mem_mode_dc   : IN     mem_mode_type ;
      reg_A_dc      : IN     word ;
      reg_B_dc      : IN     word ;
      res_n         : IN     std_logic ;
      target_reg_dc : IN     REG_ADDR ;
      alu_mode_ex   : OUT    alu_mode_type ;
      fwd_sela_ex   : OUT    std_logic_vector (1 DOWNTO 0);
      fwd_selb_ex   : OUT    std_logic_vector (1 DOWNTO 0);
      fwd_selsd_ex  : OUT    std_logic ;
      imm_ex        : OUT    word ;
      imm_to_alu_ex : OUT    std_logic ;
      mem_mode_ex   : OUT    mem_mode_type ;
      reg_B_ex_1    : OUT    word ;
      target_reg_ex : OUT    REG_ADDR ;
      value_a_1     : OUT    word 
   );
   END COMPONENT;
   COMPONENT dec
   PORT (
      instr_dc            : IN     word ;
      mem_mode_ex         : IN     mem_mode_type ;
      target_reg_ex       : IN     REG_ADDR ;
      target_reg_me       : IN     reg_addr ;
      alu_mode_dc         : OUT    alu_mode_type ;
      fwd_sela_dc         : OUT    std_logic_vector (1 DOWNTO 0);
      fwd_selb_dc         : OUT    std_logic_vector (1 DOWNTO 0);
      fwd_selsd_dc        : OUT    std_logic ;
      imm_dc              : OUT    word ;
      imm_dec_control_mux : OUT    std_logic ;
      imm_to_alu_dc       : OUT    std_logic ;
      mem_mode_dc         : OUT    mem_mode_type ;
      sela_dec            : OUT    reg_addr ;
      selb_dec            : OUT    reg_addr ;
      target_reg_dc       : OUT    REG_ADDR 
   );
   END COMPONENT;
   COMPONENT dec_add_one
   PORT (
      imm_dc      : IN     word ;
      pc_dec      : IN     word ;
      dec_add2mux : OUT    word 
   );
   END COMPONENT;
   COMPONENT dec_mux_imm
   PORT (
      dec_add2mux         : IN     word ;
      imm_dc              : IN     word ;
      imm_dec_control_mux : IN     std_logic ;
      imm_bta_dc          : OUT    word 
   );
   END COMPONENT;
   COMPONENT dm
   PORT (
      alu_out_me_b    : IN     word ;
      clk             : IN     std_logic ;
      mem_mode_me     : IN     mem_mode_type ;
      res_n           : IN     std_logic ;
      store_data_2_dm : IN     word ;
      value_dm        : OUT    word 
   );
   END COMPONENT;
   COMPONENT dm_fwd_mux_logic
   PORT (
      fwd_selsd_me    : IN     std_logic ;
      reg_value_wb    : IN     word ;
      store_data_dm   : IN     word ;
      store_data_2_dm : OUT    word 
   );
   END COMPONENT;
   COMPONENT dm_mux
   PORT (
      alu_out_me  : IN     word ;
      mem_mode_me : IN     mem_mode_type ;
      value_dm    : IN     word ;
      me_out_me   : OUT    word 
   );
   END COMPONENT;
   COMPONENT dm_reg
   PORT (
      clk           : IN     std_logic ;
      me_out_me     : IN     word ;
      res_n         : IN     std_logic ;
      target_reg_me : IN     reg_addr ;
      reg_addr_wb   : OUT    reg_addr ;
      reg_value_wb  : OUT    word 
   );
   END COMPONENT;
   COMPONENT ex_reg
   PORT (
      alu_out_ex    : IN     word ;
      clk           : IN     std_logic ;
      fwd_selsd_ex  : IN     std_logic ;
      mem_mode_ex   : IN     mem_mode_type ;
      reg_B_ex      : IN     word ;
      res_n         : IN     std_logic ;
      target_reg_ex : IN     REG_ADDR ;
      alu_out_me    : OUT    word ;
      fwd_selsd_me  : OUT    std_logic ;
      mem_mode_me   : OUT    mem_mode_type ;
      store_data_dm : OUT    word ;
      target_reg_me : OUT    reg_addr 
   );
   END COMPONENT;
   COMPONENT fwd_1
   PORT (
      alu_out_me   : IN     word ;
      fwd_sela_ex  : IN     std_logic_vector (1 DOWNTO 0);
      reg_value_wb : IN     word ;
      value_a_1    : IN     word ;
      value_a      : OUT    word 
   );
   END COMPONENT;
   COMPONENT fwd_2
   PORT (
      alu_out_me   : IN     word ;
      fwd_selb_ex  : IN     std_logic_vector (1 DOWNTO 0);
      reg_B_ex_1   : IN     word ;
      reg_value_wb : IN     word ;
      reg_B_ex     : OUT    word 
   );
   END COMPONENT;
   COMPONENT fwd_alu_1
   PORT (
      alu_out_ex : IN     word
   );
   END COMPONENT;
   COMPONENT if_reg
   PORT (
      clk        : IN     std_logic ;
      if_u_instr : IN     word ;
      pc_if      : IN     word ;
      res_n      : IN     std_logic ;
      instr_dc   : OUT    word ;
      pc_dec     : OUT    word 
   );
   END COMPONENT;
   COMPONENT im
   PORT (
      pc_if      : IN     word ;
      res_n      : IN     std_logic ;
      if_u_instr : OUT    word 
   );
   END COMPONENT;
   COMPONENT mp_if
   END COMPONENT;
   COMPONENT mx_alu_ex
   PORT (
      imm_ex        : IN     word ;
      imm_to_alu_ex : IN     std_logic ;
      reg_B_ex      : IN     word ;
      value_b       : OUT    word 
   );
   END COMPONENT;
   COMPONENT pc_reg
   PORT (
      clk          : IN     std_logic ;
      if_u_next_pc : IN     word ;
      res_n        : IN     std_logic ;
      pc_if        : OUT    word 
   );
   END COMPONENT;
   COMPONENT proofer
   PORT (
      alu_out_me   : IN     word ;
      mem_mode_me  : IN     mem_mode_type ;
      alu_out_me_b : OUT    word 
   );
   END COMPONENT;
   COMPONENT rf
   PORT (
      clk          : IN     std_logic ;
      reg_addr_wb  : IN     reg_addr ;
      reg_value_wb : IN     word ;
      res_n        : IN     std_logic ;
      sela_dec     : IN     reg_addr ;
      selb_dec     : IN     reg_addr ;
      reg_A_dc     : OUT    word ;
      reg_B_dc     : OUT    word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : add4 USE ENTITY RISCV_lib.add4;
   FOR ALL : alu USE ENTITY RISCV_lib.alu;
   FOR ALL : bpu USE ENTITY RISCV_lib.bpu;
   FOR ALL : dc_reg USE ENTITY RISCV_lib.dc_reg;
   FOR ALL : dec USE ENTITY RISCV_lib.dec;
   FOR ALL : dec_add_one USE ENTITY RISCV_lib.dec_add_one;
   FOR ALL : dec_mux_imm USE ENTITY RISCV_lib.dec_mux_imm;
   FOR ALL : dm USE ENTITY RISCV_lib.dm;
   FOR ALL : dm_fwd_mux_logic USE ENTITY RISCV_lib.dm_fwd_mux_logic;
   FOR ALL : dm_mux USE ENTITY RISCV_lib.dm_mux;
   FOR ALL : dm_reg USE ENTITY RISCV_lib.dm_reg;
   FOR ALL : ex_reg USE ENTITY RISCV_lib.ex_reg;
   FOR ALL : fwd_1 USE ENTITY RISCV_lib.fwd_1;
   FOR ALL : fwd_2 USE ENTITY RISCV_lib.fwd_2;
   FOR ALL : fwd_alu_1 USE ENTITY RISCV_lib.fwd_alu_1;
   FOR ALL : if_reg USE ENTITY RISCV_lib.if_reg;
   FOR ALL : im USE ENTITY RISCV_lib.im;
   FOR ALL : mp_if USE ENTITY RISCV_lib.mp_if;
   FOR ALL : mx_alu_ex USE ENTITY RISCV_lib.mx_alu_ex;
   FOR ALL : pc_reg USE ENTITY RISCV_lib.pc_reg;
   FOR ALL : proofer USE ENTITY RISCV_lib.proofer;
   FOR ALL : rf USE ENTITY RISCV_lib.rf;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   add4_one : add4
      PORT MAP (
         pc_if        => pc_if,
         if_u_next_pc => if_u_next_pc
      );
   U_3 : alu
      PORT MAP (
         alu_mode_ex => alu_mode_ex,
         value_a     => value_a,
         value_b     => value_b,
         alu_out_ex  => alu_out_ex
      );
   U_4 : bpu
      PORT MAP (
         bpu_mode_ex => bpu_mode_ex
      );
   U_9 : dc_reg
      PORT MAP (
         alu_mode_dc   => alu_mode_dc,
         clk           => clk,
         fwd_sela_dc   => fwd_sela_dc,
         fwd_selb_dc   => fwd_selb_dc,
         fwd_selsd_dc  => fwd_selsd_dc,
         imm_bta_dc    => imm_bta_dc,
         imm_to_alu_dc => imm_to_alu_dc,
         mem_mode_dc   => mem_mode_dc,
         reg_A_dc      => reg_A_dc,
         reg_B_dc      => reg_B_dc,
         res_n         => res_n,
         target_reg_dc => target_reg_dc,
         alu_mode_ex   => alu_mode_ex,
         fwd_sela_ex   => fwd_sela_ex,
         fwd_selb_ex   => fwd_selb_ex,
         fwd_selsd_ex  => fwd_selsd_ex,
         imm_ex        => imm_ex,
         imm_to_alu_ex => imm_to_alu_ex,
         mem_mode_ex   => mem_mode_ex,
         reg_B_ex_1    => reg_B_ex_1,
         target_reg_ex => target_reg_ex,
         value_a_1     => value_a_1
      );
   U_1 : dec
      PORT MAP (
         instr_dc            => instr_dc,
         mem_mode_ex         => mem_mode_ex,
         target_reg_ex       => target_reg_ex,
         target_reg_me       => target_reg_me,
         alu_mode_dc         => alu_mode_dc,
         fwd_sela_dc         => fwd_sela_dc,
         fwd_selb_dc         => fwd_selb_dc,
         fwd_selsd_dc        => fwd_selsd_dc,
         imm_dc              => imm_dc,
         imm_dec_control_mux => imm_dec_control_mux,
         imm_to_alu_dc       => imm_to_alu_dc,
         mem_mode_dc         => mem_mode_dc,
         sela_dec            => sela_dec,
         selb_dec            => selb_dec,
         target_reg_dc       => target_reg_dc
      );
   idec_add_one : dec_add_one
      PORT MAP (
         imm_dc      => imm_dc,
         pc_dec      => pc_dec,
         dec_add2mux => dec_add2mux
      );
   idec_mux_imm : dec_mux_imm
      PORT MAP (
         dec_add2mux         => dec_add2mux,
         imm_dc              => imm_dc,
         imm_dec_control_mux => imm_dec_control_mux,
         imm_bta_dc          => imm_bta_dc
      );
   iDM : dm
      PORT MAP (
         alu_out_me_b    => alu_out_me_b,
         clk             => clk,
         mem_mode_me     => mem_mode_me,
         res_n           => res_n,
         store_data_2_dm => store_data_2_dm,
         value_dm        => value_dm
      );
   ifwd_logic_dm : dm_fwd_mux_logic
      PORT MAP (
         fwd_selsd_me    => fwd_selsd_me,
         reg_value_wb    => reg_value_wb,
         store_data_dm   => store_data_dm,
         store_data_2_dm => store_data_2_dm
      );
   U_0 : dm_mux
      PORT MAP (
         alu_out_me  => alu_out_me,
         mem_mode_me => mem_mode_me,
         value_dm    => value_dm,
         me_out_me   => me_out_me
      );
   U_11 : dm_reg
      PORT MAP (
         clk           => clk,
         me_out_me     => me_out_me,
         res_n         => res_n,
         target_reg_me => target_reg_me,
         reg_addr_wb   => reg_addr_wb,
         reg_value_wb  => reg_value_wb
      );
   U_10 : ex_reg
      PORT MAP (
         alu_out_ex    => alu_out_ex,
         clk           => clk,
         fwd_selsd_ex  => fwd_selsd_ex,
         mem_mode_ex   => mem_mode_ex,
         reg_B_ex      => reg_B_ex,
         res_n         => res_n,
         target_reg_ex => target_reg_ex,
         alu_out_me    => alu_out_me,
         fwd_selsd_me  => fwd_selsd_me,
         mem_mode_me   => mem_mode_me,
         store_data_dm => store_data_dm,
         target_reg_me => target_reg_me
      );
   U_6 : fwd_1
      PORT MAP (
         alu_out_me   => alu_out_me,
         fwd_sela_ex  => fwd_sela_ex,
         reg_value_wb => reg_value_wb,
         value_a_1    => value_a_1,
         value_a      => value_a
      );
   U_5 : fwd_2
      PORT MAP (
         alu_out_me   => alu_out_me,
         fwd_selb_ex  => fwd_selb_ex,
         reg_B_ex_1   => reg_B_ex_1,
         reg_value_wb => reg_value_wb,
         reg_B_ex     => reg_B_ex
      );
   U_12 : fwd_alu_1
      PORT MAP (
         alu_out_ex => alu_out_ex
      );
   U_8 : if_reg
      PORT MAP (
         clk        => clk,
         if_u_instr => if_u_instr,
         pc_if      => pc_if,
         res_n      => res_n,
         instr_dc   => instr_dc,
         pc_dec     => pc_dec
      );
   im_one : im
      PORT MAP (
         pc_if      => pc_if,
         res_n      => res_n,
         if_u_instr => if_u_instr
      );
   U_7 : mp_if;
   max_alu_ex_1 : mx_alu_ex
      PORT MAP (
         imm_ex        => imm_ex,
         imm_to_alu_ex => imm_to_alu_ex,
         reg_B_ex      => reg_B_ex,
         value_b       => value_b
      );
   pc_reg_one : pc_reg
      PORT MAP (
         clk          => clk,
         if_u_next_pc => if_u_next_pc,
         res_n        => res_n,
         pc_if        => pc_if
      );
   iproofer : proofer
      PORT MAP (
         alu_out_me   => alu_out_me,
         mem_mode_me  => mem_mode_me,
         alu_out_me_b => alu_out_me_b
      );
   U_2 : rf
      PORT MAP (
         clk          => clk,
         reg_addr_wb  => reg_addr_wb,
         reg_value_wb => reg_value_wb,
         res_n        => res_n,
         sela_dec     => sela_dec,
         selb_dec     => selb_dec,
         reg_A_dc     => reg_A_dc,
         reg_B_dc     => reg_B_dc
      );

END struct;
